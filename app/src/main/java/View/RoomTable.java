/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View;

import Model.RoomTableModel;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Zyron
 */
public class RoomTable extends javax.swing.JPanel {
private RoomTableModel model;

    public RoomTable() {
        initComponents();
        this.model = new RoomTableModel();
        attachButtonActions();
        updateRoomTable();
        
    }


private void attachButtonActions() {
    jButton1.addActionListener(e -> updateRoom());
    jButton2.addActionListener(e -> clearRoom());
}
private void updateRoom() {
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    boolean success = true;
    for (int i = 0; i < model.getRowCount(); i++) {
        Integer roomNumber = (Integer) model.getValueAt(i, 0); 
        String roomType = (String) model.getValueAt(i, 1);
        String roomStatus = (String) model.getValueAt(i, 2); 
        String roomUpdate = (String) model.getValueAt(i, 3); 

        if (!this.model.updateRoomDetails(roomNumber, roomStatus, roomUpdate)) {
            success = false;
            break;
        }
    }
    
    if (success) {
        JOptionPane.showMessageDialog(this, "Room updated successfully!");
        updateRoomTable(); 
    } else {
        JOptionPane.showMessageDialog(this, "Failed to update room");
    }
}

private void clearRoom() {
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to clear.");
        return;
    }

    int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to clear the selected room details?", "Confirm Clear", JOptionPane.YES_NO_OPTION);
    if (confirmation == JOptionPane.YES_OPTION) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int roomNumber = (Integer) model.getValueAt(selectedRow, 0); 

        model.setValueAt(null, selectedRow, 2); 
        model.setValueAt(null, selectedRow, 3); 


        if (this.model.clearRoomDetails(roomNumber)) {
            JOptionPane.showMessageDialog(this, "Room cleared successfully!");
            updateRoomTable(); 
        } else {
            JOptionPane.showMessageDialog(this, "Failed to clear room.");
        }
    }
}

    private void updateRoomTable() {
        try {
            ResultSet rs = model.fetchRoomDetails();
            DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
            tableModel.setRowCount(0);

            while (rs.next()) {
                int roomNumber = rs.getInt("roomNumber");
                String roomType = rs.getString("roomType");
                String roomStatus = rs.getString("roomStatus");
                String roomUpdate = rs.getString("roomUpdate");
                tableModel.addRow(new Object[]{roomNumber, roomType, roomStatus, roomUpdate});
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error fetching room details: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }




    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField3 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jTextField3.setText("jTextField3");

        jTextField5.setText("jTextField5");

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Room Number", "Room Type", "Room Status", "Room Update"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("UPDATE");

        jButton2.setText("CLEAR");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(251, 251, 251)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
}
